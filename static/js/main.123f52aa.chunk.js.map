{"version":3,"sources":["components/pages/Home.js","App.js","index.js"],"names":["cards","to","i","x","y","scale","rot","Math","random","delay","trans","r","s","concat","Home","_useState","useState","Set","gone","Object","slicedToArray","_useSprings","useSprings","length","objectSpread","from","_useSprings2","props","set","bind","useGesture","_ref","index","args","down","xDelta","delta","xDir","distance","direction","velocity","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","map","_ref2","react_default","a","createElement","web","div","key","style","transform","interpolate","assign","backgroundImage","App","Fragment","pages_Home","ReactDOM","render","src_App","document","getElementById"],"mappings":"qLAIMA,EAAQ,CACZ,gFACA,6EACA,+EACA,kIACA,iFAIIC,EAAK,SAAAC,GAAC,MAAK,CAAEC,EAAG,EAAGC,GAAQ,EAALF,EAAQG,MAAO,EAAGC,IAA2B,GAAhBC,KAAKC,SAAV,GAAyBC,MAAW,IAAJP,IAG9EQ,EAAQ,SAACC,EAAGC,GAAJ,oDAAAC,OAAwDF,EAAI,GAA5D,iBAAAE,OAA8EF,EAA9E,eAAAE,OAA6FD,EAA7F,MA6BCE,EA3BF,WAAM,IAAAC,EACFC,mBAAS,kBAAM,IAAIC,MAA3BC,EADUC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,MAAAM,EAEIC,YAAWtB,EAAMuB,OAAQ,SAAArB,GAAC,OAAAiB,OAAAK,EAAA,EAAAL,CAAA,GAAUlB,EAAGC,GAAb,CAAiBuB,KAN/C,CAAEtB,EAAG,EAAGG,IAAK,EAAGD,MAAO,IAAKD,GAAI,SAIhCsB,EAAAP,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAEVM,EAFUD,EAAA,GAEHE,EAFGF,EAAA,GAIXG,EAAOC,YAAW,SAAAC,GAAqF,IAA3EC,EAA2Eb,OAAAC,EAAA,EAAAD,CAAAY,EAAlFE,KAAkF,MAAnEC,EAAmEH,EAAnEG,KAAcC,EAAqDhB,OAAAC,EAAA,EAAAD,CAAAY,EAA7DK,MAA6D,MAAtBC,GAAsBN,EAA5CO,SAA4CnB,OAAAC,EAAA,EAAAD,CAAAY,EAAlCQ,UAAkC,OAAfC,EAAeT,EAAfS,SAEtFC,EAAMJ,EAAO,GAAK,EAAI,GACvBH,GAFWM,EAAW,IAELtB,EAAKwB,IAAIV,GAC/BJ,EAAI,SAAA1B,GACF,GAAI8B,IAAU9B,EAAd,CACA,IAAMyC,EAASzB,EAAK0B,IAAIZ,GAIxB,MAAO,CAAE7B,EAHCwC,GAAU,IAAME,OAAOC,YAAcL,EAAMP,EAAOC,EAAS,EAGzD7B,IAFA6B,EAAS,KAAOQ,EAAe,GAANF,EAAWD,EAAW,GAE1CnC,MADH6B,EAAO,IAAM,EACHzB,WAAOsC,EAAWC,OAAQ,CAAEC,SAAU,GAAIC,QAAShB,EAAO,IAAMS,EAAS,IAAM,SAEpGT,GAAQhB,EAAKiC,OAASnD,EAAMuB,QAAQ6B,WAAW,kBAAMlC,EAAKmC,SAAWzB,EAAI,SAAA1B,GAAC,OAAID,EAAGC,MAAK,OAG7F,OAAOyB,EAAM2B,IAAI,SAAAC,EAAuBrD,GAAvB,IAAGC,EAAHoD,EAAGpD,EAAGC,EAANmD,EAAMnD,EAAGE,EAATiD,EAASjD,IAAKD,EAAdkD,EAAclD,MAAd,OACfmD,EAAAC,EAAAC,cAACC,EAAA,EAASC,IAAV,CAAcC,IAAK3D,EAAG4D,MAAO,CAAEC,UAAWC,YAAY,CAAC7D,EAAGC,GAAI,SAACD,EAAGC,GAAJ,qBAAAS,OAAyBV,EAAzB,OAAAU,OAAgCT,EAAhC,aAE5DoD,EAAAC,EAAAC,cAACC,EAAA,EAASC,IAAVzC,OAAA8C,OAAA,GAAkBpC,EAAK3B,GAAvB,CAA2B4D,MAAO,CAAEC,UAAWC,YAAY,CAAC1D,EAAKD,GAAQK,GAAQwD,gBAAe,OAAArD,OAASb,EAAME,GAAf,mBC3BvFiE,MARf,WACE,OACEX,EAAAC,EAAAC,cAAAF,EAAAC,EAAAW,SAAA,KACEZ,EAAAC,EAAAC,cAACW,EAAD,QCJNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.123f52aa.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { useSprings, animated, interpolate } from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\n\nconst cards = [\n  'https://upload.wikimedia.org/wikipedia/commons/f/f5/RWS_Tarot_08_Strength.jpg',\n  'https://upload.wikimedia.org/wikipedia/commons/5/53/RWS_Tarot_16_Tower.jpg',\n  'https://upload.wikimedia.org/wikipedia/commons/9/9b/RWS_Tarot_07_Chariot.jpg',\n  'https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/RWS_Tarot_02_High_Priestess.jpg/690px-RWS_Tarot_02_High_Priestess.jpg',\n  'https://upload.wikimedia.org/wikipedia/commons/d/de/RWS_Tarot_01_Magician.jpg',\n]\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({ x: 0, y: i * -4, scale: 1, rot: -10 + Math.random() * 20, delay: i * 100 })\nconst from = i => ({ x: 0, rot: 0, scale: 1.5, y: -1000 })\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) => `perspective(1500px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`\n\nconst Home = () => {\n  const [gone] = useState(() => new Set()) // The set flags all the cards that are flicked out\n  const [props, set] = useSprings(cards.length, i => ({ ...to(i), from: from(i) })) // Create a bunch of springs using the helpers above\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(({ args: [index], down, delta: [xDelta], distance, direction: [xDir], velocity }) => {\n    const trigger = velocity > 0.2 // If you flick hard enough it should trigger the card to fly out\n    const dir = xDir < 0 ? -1 : 1 // Direction should either point left or right\n    if (!down && trigger) gone.add(index) // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n    set(i => {\n      if (index !== i) return // We're only interested in changing spring-data for the current spring\n      const isGone = gone.has(index)\n      const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0 // When a card is gone it flys out left or right, otherwise goes back to zero\n      const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0) // How much the card tilts, flicking it harder makes it rotate faster\n      const scale = down ? 1.1 : 1 // Active cards lift up a bit\n      return { x, rot, scale, delay: undefined, config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 } }\n    })\n    if (!down && gone.size === cards.length) setTimeout(() => gone.clear() || set(i => to(i)), 600)\n  })\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div key={i} style={{ transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`) }}>\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div {...bind(i)} style={{ transform: interpolate([rot, scale], trans), backgroundImage: `url(${cards[i]})` }} />\n    </animated.div>\n  ))\n}\n\nexport default Home\n","import React from 'react'\nimport Home from './components/pages/Home';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <>\n      <Home />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}